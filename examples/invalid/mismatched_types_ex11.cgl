struct extraStructToShowBadDereferencing {
  int* a;
}

fn main() -> int {
  // mismatched type
  int* ptr = allocate float(5);
  // mismatched type
  float* ptr2 = allocate int;
  *ptr = 10;

  int stackVar = 10;
  int* stackPtr = &stackVar;
  println("Address of stackVar: " + stackPtr);

  println("Value of stackVar: " + *stackPtr);
  println("Value of ptr: " + *ptr);
  println("Value of ptr2: " + *ptr2);

  // mismatched type
  string andResult = (ptr as long) & (ptr2 as long);
  long orResult = (ptr as long) | (ptr2 as long);
  long xorResult = (ptr as long) ^ (ptr2 as long);
  long notResult = ~(ptr as long);

  println("Bitwise actions on the pointer addresses p1 " + ptr + " and p2 " + ptr2);
  println("Bitwise AND: " + andResult);
  println("Bitwise OR: " + orResult);
  println("Bitwise XOR: " + xorResult);
  println("Bitwise NOT: " + notResult);

  // mismatched field operator
  extraStructToShowBadDereferencing* extraStruct = allocate extraStructToShowBadDereferencing(nullptr);
  extraStruct->a = allocate int(5);
  extraStruct.a = 5;

  // mismatched return type
  return "done";
}
