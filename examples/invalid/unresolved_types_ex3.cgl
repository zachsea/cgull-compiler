// missing node type definition, resolution error

struct NodePair {
  Node prev;
  Node next;
}

fn printNodes(Node head) -> void {
  if (head == nullptr) {
    return;
  }
  println(head.value);
  // recursive call
  printNodes(head.next);
}

fn getNeighbors(Node head, string c) -> NodePair {
  Node prev = nullptr;
  Node curr = head;
  Node next = nullptr;
  // while loop, similar to Golang's for loop
  for (curr != nullptr) {
    if (curr.value == c) {
      next = curr.next;
      break;
    }
    prev = curr;
    curr = curr.next;
  }
  return NodePair(prev, next);
}

fn main() {
  // dynamic memory allocation
  Node head = Node("A", nullptr);
  head.next = Node("B", nullptr);
  head.next.next = Node("C", nullptr);
  head.next.next.next = nullptr;

  printNodes(head);
  NodePair pair = getNeighbors(head, "B");

  println("Previous of B: " + (if (pair.prev != nullptr) pair.prev.value else " "));
  println("Next of B: " + (if (pair.next != nullptr) pair.next.value else " "));
}
